import os
try:
    from colorama import *
except ImportError:
    import sys
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "colorama"])
    from colorama import *
    
def limpiar():
    os.system('cls' if os.name == "ce" or os.name == "nt" or os.name == "dos"  else 'clear')

def pausa():
    input("\tPresione enter para continuar")
limpiar();
import math
limpiar()
print(F'''{Fore.WHITE+Back.BLUE}
╔═════════════════════════════════════════════════════════════════════════════╗
║                                                                             ║
║                                                                             ║
║    ╔═══════╗            ╦                                   ╦   ╔═══╦═══╗   ║
║    ║                    ║                                   ║       ║       ║
║    ║                    ║                                   ║       ║       ║
║    ║                    ║                                   ║       ║       ║
║    ╠══════╣     ╔═══════╣    ╦       ╦    ╔═══════╗         ║       ║       ║
║    ║            ║       ║    ║       ║    ║                 ║       ║       ║
║    ║            ║       ║    ║       ║    ║          ╔╗     ║       ║       ║
║    ╚═══════╝    ╚═══════╝    ╚═══════╝    ╚═══════╝  ╚╝     ╩       ╩       ║
║                                                                             ║
╠═════════════════════════════════════════════════════════════════════════════╣{Style.RESET_ALL}
║                                                                             ║
║    ╔══════╗    ╦       ╦   ╔═══╦═══╗   ╦       ╦    ╔═════╗    ╔╗      ╦    ║
║    ║      ╚╗   ╚╗     ╔╝       ║       ║       ║   ╔╝     ╚╗   ║╚╗     ║    ║
║    ║       ║    ╚╗   ╔╝        ║       ║       ║   ║       ║   ║ ╚╗    ║    ║
║    ║      ╔╝     ╚╗ ╔╝         ║       ║       ║   ║       ║   ║  ╚╗   ║    ║
║    ╠══════╝       ╚╦╝          ║       ╠═══════╣   ║       ║   ║   ╚╗  ║    ║
║    ║               ║           ║       ║       ║   ║       ║   ║    ╚╗ ║    ║
║    ║               ║           ║       ║       ║   ╚╗     ╔╝   ║     ╚╗║    ║
║    ╩               ╩           ╩       ╩       ╩    ╚═════╝    ╩      ╚╝    ║
║                                                                             ║
║                                                                             ║
║                                                                             ║
║  ╔═════╗   ╔╗       ╔╗   ╔═════╗    ╔╗      ╦                               ║
║ ╔╝     ╚╗   ║       ║   ╔╝     ╚╗   ║╚╗     ║                               ║
║ ║       ║   ╚╗     ╔╝   ║       ║   ║ ╚╗    ║                               ║
║ ║       ║    ║     ║    ║       ║   ║  ╚╗   ║                               ║
║ ╠═══════╣    ╚╗   ╔╝    ╠═══════╣   ║   ╚╗  ║  ╠═════╣                      ║
║ ║       ║     ║   ║     ║       ║   ║    ╚╗ ║                               ║
║ ║       ║     ╚╗ ╔╝     ║       ║   ║     ╚╗║                               ║
║ ╩       ╩      ╚═╝      ╩       ╩   ╩      ╚╝                               ║
║                                                                             ║
║                                                                             ║
║                             ╔═══════╗   ╔═════╗  ╔══════╗    ╔═════╗        ║
║                                    ╔╝  ╔╝     ╚╗ ║      ╚╗  ╔╝     ╚╗       ║
║                                   ╔╝   ║       ║ ║       ║  ║       ║       ║
║                                  ╔╝    ║       ║ ║       ║  ║       ║       ║
║                               ╔══╝     ╠═══════╣ ║       ║  ║       ║       ║
║                              ╔╝        ║       ║ ║       ║  ║       ║       ║
║                             ╔╝         ║       ║ ║      ╔╝  ╚╗     ╔╝       ║
║                             ╚═══════╝  ╩       ╩ ╚══════╝    ╚═════╝        ║
║                                                                             ║
╚═════════════════════════════════════════════════════════════════════════════╝''')
pausa();limpiar();
#####################################################################################################################################


print(F'''{Fore.WHITE+Back.BLUE}

╔═════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                         ║
║  ╔════╗  ╔═════╗  ╔═════╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗  ╔═════╗  ╔═════╗  ╔════╗  ║
║ ╔╝    ╚╗ ║     ╚╗ ║       ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ║       ╔╝    ╚╗ ║
║ ║      ║ ║      ║ ║       ║      ║ ║      ║ ║      ║ ║      ║ ║      ║ ║       ║        ║
║ ║      ║ ║     ╔╝ ║       ║     ╔╝ ║      ║ ║      ║ ║      ║ ║     ╔╝ ║       ╚╗       ║
║ ║      ║ ╠═════╝  ╠════╣  ╠══╦══╝  ╠══════╣ ║      ║ ║      ║ ╠══╦══╝  ╠════╣   ╚════╗  ║
║ ║      ║ ║        ║       ║  ╚╗    ║      ║ ║      ║ ║      ║ ║  ╚╗    ║             ╚╗ ║
║ ╚╗    ╔╝ ║        ║       ║   ╚╗   ║      ║ ║     ╔╝ ╚╗    ╔╝ ║   ╚╗   ║       ╚╗    ╔╝ ║
║  ╚════╝  ╩        ╚═════╝ ╩    ╚╝  ╩      ╩ ╚═════╝   ╚════╝  ╩    ╚╝  ╚═════╝  ╚════╝  ║
║                                                                                         ║
║                                               ╦                                         ║
║                                              ╔╝                                         ║
║                                              ╩                                          ║
║  ╔════╗   ╔═════╗  ╦ ╔══╦══╗ ╔╗      ╔╗  ╔═════╗ ╔══╦══╗ ╦   ╔════╗   ╔════╗    ╔════╗  ║
║ ╔╝    ╚╗  ║     ╚╗ ║    ║    ║╚╗    ╔╝║  ║          ║    ║  ╔╝       ╔╝    ╚╗  ╔╝    ╚╗ ║
║ ║      ║  ║      ║ ║    ║    ║ ╚╗  ╔╝ ║  ║          ║    ║  ║        ║      ║  ║        ║
║ ║      ║  ║     ╔╝ ║    ║    ║  ╚╗╔╝  ║  ║          ║    ║  ║        ║      ║  ╚╗       ║
║ ╠══════╣  ╠══╦══╝  ║    ║    ║   ╚╝   ║  ╠═══╣      ║    ║  ║        ║      ║   ╚════╗  ║
║ ║      ║  ║  ╚╗    ║    ║    ║        ║  ║          ║    ║  ║        ║      ║        ╚╗ ║
║ ║      ║  ║   ╚╗   ║    ║    ║        ║  ║          ║    ║  ╚╗       ╚╗    ╔╝  ╚╗    ╔╝ ║
║ ╩      ╩  ╩    ╚╝  ╩    ╩    ╩        ╩  ╚═════╝    ╩    ╩   ╚════╝   ╚════╝    ╚════╝  ║
║                                                                                         ║
║                                                                                         ║
╠═════════════════════════════════════════════════════════════════════════════════════════╣{Style.RESET_ALL}
║                    operandos (objetos numéricos)                                        ║
╠═════════════╦═══════════════════════════════════════════════════════════════════════════╣
║      +      ║     Suma - adicióna dos operandos.                                        ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║             ║     Resta - substracción  al valor del operando de la izquierda           ║
║      -      ║         el valor del de la derecha.                                       ║
║             ║     Cambia el signo sobre un único operador.                              ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║      *      ║     Producto - Multiplicación de dos operandos.                           ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║      /      ║     Divide el operando de la izquierda por el de la derecha.              ║
║             ║         La salida siempre es un float (genera un casting)                 ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║     //      ║     división entera se obtiene el cociente 'entero' de dividir el operando║
║             ║         de la izquierda por el de la derecha.                             ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║      %      ║     Módulo es el residuo que se obtiene el resto de dividir el entero del ║
║             ║         operando de la izquierda por el de la derecha.                    ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║     ** n    ║     Potencia - Exponenciación eleva el operando de la izquierda a la      ║
║             ║         potencia del operador del de la derecha.                          ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║   ** (1/n)  ║     Radicación eleva el operando de la izquierda a la potencia de 1 (uno) ║
║             ║         dividido el valor operador del de la derecha.                     ║
╚═════════════╩═══════════════════════════════════════════════════════════════════════════╝'''+Back.RESET)

t=[["","Addición- suma","x + y"],
["-","Subtracción -resta","x - "],
["*","Multiplicación","x * y"],
["/","División","x / y"],
["//","división entera","x // y"],
["% ","Modulo resto"," x % y"],
["**","Exponenciación","x ** y"],
["**(1/n)","Radicación","x **(1/y)"]]
print (f"{t}")

a=8
print ("a=8")
print(f"el valor de {a=}")
#------------------------------
a=a+12
print ("a=a+12")
print(f"ahora el valor de {a=} Addición- suma ")
#------------------------------
a=a-5
print ("a=a-5")
print(f"ahora el valor de {a=} Subtracción -resta")
#------------------------------
a=a*2
print ("a=a*2")
print(f"ahora el valor de {a=} Multiplicación ")
#------------------------------
a=a/3
print ("a=a/3")
print(f"ahora el valor de {a=} División")
#------------------------------
a=a%3
print ("a=a%3")
print(f"ahora el valor de {a=} Modulo resto")
#------------------------------
a=10
print ("a=10")
print(f"el valor de {a=}")
#------------------------------
a=a//3
print ("a=a//3")
print(f"ahora el valor de {a=} división entera")
#------------------------------
a=a*12
print ("a=a*12")
print(f"ahora el valor de {a=} Exponenciación ")
#------------------------------
a=a**(1/2)
print ("a=a**(1/2)")
print(f"ahora el valor de {a=} Radicación")


pausa()
limpiar()

print(F'''{Fore.WHITE+Back.BLUE}
╔═════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                         ║
║  ╔════╗  ╔═════╗  ╔═════╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗  ╔═════╗  ╔═════╗  ╔════╗  ║
║ ╔╝    ╚╗ ║     ╚╗ ║       ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ║       ╔╝    ╚╗ ║
║ ║      ║ ║      ║ ║       ║      ║ ║      ║ ║      ║ ║      ║ ║      ║ ║       ║        ║
║ ║      ║ ║     ╔╝ ║       ║     ╔╝ ║      ║ ║      ║ ║      ║ ║     ╔╝ ║       ╚╗       ║
║ ║      ║ ╠═════╝  ╠════╣  ╠══╦══╝  ╠══════╣ ║      ║ ║      ║ ╠══╦══╝  ╠════╣   ╚════╗  ║
║ ║      ║ ║        ║       ║  ╚╗    ║      ║ ║      ║ ║      ║ ║  ╚╗    ║             ╚╗ ║
║ ╚╗    ╔╝ ║        ║       ║   ╚╗   ║      ║ ║     ╔╝ ╚╗    ╔╝ ║   ╚╗   ║       ╚╗    ╔╝ ║
║  ╚════╝  ╩        ╚═════╝ ╩    ╚╝  ╩      ╩ ╚═════╝   ╚════╝  ╩    ╚╝  ╚═════╝  ╚════╝  ║
║                                                                                         ║
║                                                                         ╦               ║
║                                                                        ╔╝               ║
║                                                                        ╩                ║
║    ╔════╗    ╔════╗   ╦   ╔════╗   ╔╗    ╦   ╔════╗    ╔════╗   ╦   ╔════╗   ╔╗    ╦    ║
║   ╔╝    ╚╗  ╔╝    ╚╗  ║  ╔╝    ╚╗  ║╚╗   ║  ╔╝    ╚╗  ╔╝    ╚╗  ║  ╔╝    ╚╗  ║╚╗   ║    ║
║   ║      ║  ║         ║  ║         ║ ╚╗  ║  ║      ║  ║         ║  ║      ║  ║ ╚╗  ║    ║
║   ║      ║  ╚╗        ║  ║         ║  ╚╗ ║  ║      ║  ║         ║  ║      ║  ║  ╚╗ ║    ║
║   ╠══════╣   ╚════╗   ║  ╠═════╗   ║   ╚╗║  ╠══════╣  ║         ║  ║      ║  ║   ╚╗║    ║
║   ║      ║        ╚╗  ║  ║     ╚╗  ║    ╚╣  ║      ║  ║         ║  ║      ║  ║    ╚╣    ║
║   ║      ║  ╚╗    ╔╝  ║  ╚╗    ╔╝  ║     ║  ║      ║  ╚╗    ╔╝  ║  ╚╗    ╔╝  ║     ║    ║
║   ╩      ╩   ╚════╝   ╩   ╚════╝   ╩     ╩  ╩      ╩   ╚════╝   ╩   ╚════╝   ╩     ╩    ║
║                                                                                         ║
║                                                                                         ║
╠══════════════════════════════════════╦══════════════════════════╦═══════════════════════╣{Style.RESET_ALL}
║                                      ║                          ║                       ║
║       = asignación de int            ║         a = 8            ║         salida        ║
║       = asignación de float          ║         a = 3.14159      ║                       ║
║       = asignación de str            ║         a = "Hola"       ║        booleana       ║
║                                      ║                          ║                       ║
╠══════════════════════════════════════╬══════════════════════════╬═══════════════════════╣
║                                      ║                          ║                       ║
║       + Suma                         ║         a += b           ║        a = a + b      ║
║       - Resta                        ║         a -= b           ║        a = a - b      ║
║       * Multiplicación               ║         a *= b           ║        a = a * b      ║
║       /  División regular            ║         a /= b           ║        a = a / b      ║
║       // División entera             ║         a //= b          ║        a = a // b     ║
║       % Módulo                       ║         a %= b           ║        a = a % b      ║
║       ** Exponenciación              ║         a **= b          ║        a = a ** b     ║
║       ** 1/radicación                ║         a **=(1/b)       ║        a = a ** (1/b) ║
║                                      ║                          ║                       ║
╚══════════════════════════════════════╩══════════════════════════╩═══════════════════════╝'''+Back.RESET)
print('''
                    Operadores de asignación de Python
                    =           x = 5       x = 5
                    +=          x += 8      x = x + 8           x=15
                    -=          x -= 8      x = x - 8           x=5
                    *=          x *= 8      x = x * 8           x=40
                    /=          x /= 8      x = x / 8           x=5
                    =           x = 50      x = 50
                    %=          x %= 8      x = x % 8           x=2
                    =           x = 50      x = 50
                    //=         x //= 8     x = x // 8          x=6
                    **=         x **= 8     x = x ** 8          6**8 = 1679616

                    asignación a nivel de bits (ver debajo)

''')

pausa()
limpiar()

print(Style.RESET_ALL)
print(F'''{Fore.WHITE+Back.BLUE}

╔═════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                         ║
║  ╔════╗  ╔═════╗  ╔═════╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗  ╔═════╗  ╔═════╗  ╔════╗  ║
║ ╔╝    ╚╗ ║     ╚╗ ║       ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ║       ╔╝    ╚╗ ║
║ ║      ║ ║      ║ ║       ║      ║ ║      ║ ║      ║ ║      ║ ║      ║ ║       ║        ║
║ ║      ║ ║     ╔╝ ║       ║     ╔╝ ║      ║ ║      ║ ║      ║ ║     ╔╝ ║       ╚╗       ║
║ ║      ║ ╠═════╝  ╠════╣  ╠══╦══╝  ╠══════╣ ║      ║ ║      ║ ╠══╦══╝  ╠════╣   ╚════╗  ║
║ ║      ║ ║        ║       ║  ╚╗    ║      ║ ║      ║ ║      ║ ║  ╚╗    ║             ╚╗ ║
║ ╚╗    ╔╝ ║        ║       ║   ╚╗   ║      ║ ║     ╔╝ ╚╗    ╔╝ ║   ╚╗   ║       ╚╗    ╔╝ ║
║  ╚════╝  ╩        ╚═════╝ ╩    ╚╝  ╩      ╩ ╚═════╝   ╚════╝  ╩    ╚╝  ╚═════╝  ╚════╝  ║
║                                                                                         ║
║                                                                              ╦          ║
║                                                                             ╔╝          ║
║                                                                             ╩           ║
║ ╔════╗  ╔════╗  ╔╗    ╔╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗   ╔════╗  ╦  ╔════╗  ╔╗    ╦║
║╔╝    ╚╗╔╝    ╚╗ ║╚╗  ╔╝║ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ╔╝    ╚╗ ║ ╔╝    ╚╗ ║╚╗   ║║
║║       ║      ║ ║ ╚╗╔╝ ║ ║      ║ ║      ║ ║      ║ ║      ║ ║        ║ ║      ║ ║ ╚╗  ║║
║║       ║      ║ ║  ╚╝  ║ ║     ╔╝ ║      ║ ║     ╔╝ ║      ║ ║        ║ ║      ║ ║  ╚╗ ║║
║║       ║      ║ ║      ║ ╠═════╝  ╠══════╣ ╠══╦══╝  ╠══════╣ ║        ║ ║      ║ ║   ╚╗║║
║║       ║      ║ ║      ║ ║        ║      ║ ║  ╚╗    ║      ║ ║        ║ ║      ║ ║    ╚╣║
║╚╗    ╔╝╚╗    ╔╝ ║      ║ ║        ║      ║ ║   ╚╗   ║      ║ ╚╗    ╔╝ ║ ╚╗    ╔╝ ║     ║║
║ ╚════╝  ╚════╝  ╩      ╩ ╩        ╩      ╩ ╩    ╚╝  ╩      ╩  ╚════╝  ╩  ╚════╝  ╩     ╩║
║                                                                                         ║
║                                                                                         ║
╠══════════════════════════════════════╦══════════════════════════╦═══════════════════════╣{Style.RESET_ALL}
║                                      ║                          ║                       ║
║         ==  condición Igual          ║         a == b           ║        False          ║
║         !=  condición Diferente      ║         a != b           ║        True           ║
║         >   mayor que                ║         a >  b           ║        True           ║
║         >=  mayor igual que          ║         a >= b           ║        True           ║
║         <   menor que                ║         a <  b           ║        False          ║
║         <=  menor igual que          ║         a <= b           ║        False          ║
║                                      ║                          ║                       ║
╚══════════════════════════════════════╩══════════════════════════╩═══════════════════════╝'''+Back.RESET)
pausa()
limpiar()


t=[["==","Igual","x == y"],
["!=","No igual / diferente","x != y"],
[">","mayor que","x > y"],
["<","menor que","x < y"],
[">=","mayor igual que","x >= y"],
["<=","menor igual que","x <= y"]]
print (f"{t}")
a=8
b=9
c=10
d=5+5
print (f"{(a>b)=}")
print (f"{(a<b)=}")
print (f"{(a>=b)=}")
print (f"{(a<=b)=}")
print (f"{(a==b)=}")
print (f"{(a!=b)=}")
print (f"{((a<=b) and (c<=d))=}")
print (f"{((a>=b) and (c>=d))=}")
print (f"{((a<=b) or (c<=d))=}")
print (f"{((a>=b) or (c>=d))=}")
pausa()
limpiar()

print(Style.RESET_ALL)
print(F'''{Fore.WHITE+Back.BLUE}
╔═════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                         ║
║  ╔════╗  ╔═════╗  ╔═════╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗  ╔═════╗  ╔═════╗  ╔════╗  ║
║ ╔╝    ╚╗ ║     ╚╗ ║       ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ║       ╔╝    ╚╗ ║
║ ║      ║ ║      ║ ║       ║      ║ ║      ║ ║      ║ ║      ║ ║      ║ ║       ║        ║
║ ║      ║ ║     ╔╝ ║       ║     ╔╝ ║      ║ ║      ║ ║      ║ ║     ╔╝ ║       ╚╗       ║
║ ║      ║ ╠═════╝  ╠════╣  ╠══╦══╝  ╠══════╣ ║      ║ ║      ║ ╠══╦══╝  ╠════╣   ╚════╗  ║
║ ║      ║ ║        ║       ║  ╚╗    ║      ║ ║      ║ ║      ║ ║  ╚╗    ║             ╚╗ ║
║ ╚╗    ╔╝ ║        ║       ║   ╚╗   ║      ║ ║     ╔╝ ╚╗    ╔╝ ║   ╚╗   ║       ╚╗    ╔╝ ║
║  ╚════╝  ╩        ╚═════╝ ╩    ╚╝  ╩      ╩ ╚═════╝   ╚════╝  ╩    ╚╝  ╚═════╝  ╚════╝  ║
║                                                                                         ║
║                                ╦                                                        ║
║                               ╔╝                                                        ║
║                               ╩                                                         ║
║                   ╦        ╔════╗    ╔════╗  ╦   ╔════╗   ╔════╗   ╔════╗               ║
║                   ║       ╔╝    ╚╗  ╔╝    ╚╗ ║  ╔╝    ╚╗ ╔╝    ╚╗ ╔╝    ╚╗              ║
║                   ║       ║      ║  ║        ║  ║        ║      ║ ║                     ║
║                   ║       ║      ║  ║        ║  ║        ║      ║ ╚╗                    ║
║                   ║       ║      ║  ╠═════╗  ║  ║        ║      ║  ╚════╗               ║
║                   ║       ║      ║  ║     ╚╗ ║  ║        ║      ║       ╚╗              ║
║                   ║       ╚╗    ╔╝  ╚╗    ╔╝ ║  ╚╗    ╔╝ ╚╗    ╔╝ ╚╗    ╔╝              ║
║                   ╚══════╝ ╚════╝    ╚════╝  ╩   ╚════╝   ╚════╝   ╚════╝               ║
║                                                                                         ║
║                                         ╔════╗                                          ║
║                                        ╔╝    ╚╗                                         ║
║                                        ║      ║                                         ║
║                                        ║      ║                                         ║
║                                        ║      ║                                         ║
║                                        ║      ║                                         ║
║                                        ╚╗    ╔╝                                         ║
║                                         ╚════╝                                          ║
║                                                                                         ║
║     ╔═════╗   ╔════╗    ╔════╗  ╦       ╔═════╗   ╔═══╗  ╔╗    ╦   ╔════╗   ╔════╗      ║
║     ║     ╚╗ ╔╝    ╚╗  ╔╝    ╚╗ ║       ║        ╔╝   ╚╗ ║╚╗   ║  ╔╝    ╚╗ ╔╝    ╚╗     ║
║     ║      ║ ║      ║  ║      ║ ║       ║        ║     ║ ║ ╚╗  ║  ║      ║ ║      ║     ║
║     ║     ╔╝ ║      ║  ║      ║ ║       ║        ║     ║ ║  ╚╗ ║  ║      ║ ╚╗           ║
║     ╠═════╣  ║      ║  ║      ║ ║       ╠════╣   ╠═════╣ ║   ╚╗║  ║      ║  ╚════╗      ║
║     ║     ╚╗ ║      ║  ║      ║ ║       ║        ║     ║ ║    ╚╣  ║      ║       ╚╗     ║
║     ║     ╔╝ ╚╗    ╔╝  ╚╗    ╔╝ ║       ║        ║     ║ ║     ║  ╚╗    ╔╝ ╚╗    ╔╝     ║
║     ╚═════╝   ╚════╝    ╚════╝  ╚═════╝ ╚═════╝  ╩     ╩ ╩     ╩   ╚════╝   ╚════╝      ║
║                                     algebra de Boole                                    ║
║                                                                                         ║
╠═════════════╦═══════════════════════════════════════════════════════════════════════════╣{Style.RESET_ALL}
║             ║                                                                           ║
║             ║         True and  True  =  True                                           ║
║             ║         True and False  = False                                           ║
║             ║        False and  True  = False                                           ║
║     and     ║        False and False  = False                                           ║
║             ║                                                                           ║
║             ║  True si todos los segmentos de la condición son True                     ║
║             ║        False si al menos un segmento es False.                            ║
║             ║                                                                           ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║             ║                                                                           ║
║             ║         True and  True  =  True                                           ║
║             ║         True and False  =  True                                           ║
║             ║        False and  True  =  True                                           ║
║      or     ║        False and False  = False                                           ║
║             ║                                                                           ║
║             ║  True si al menos un segmentos de la condición es True.                   ║
║             ║        False si ninguno segmento es True.                                 ║
║             ║                                                                           ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║             ║                                                                           ║
║             ║           not  True   =  False                                            ║
║             ║           not False   =   True                                            ║
║             ║                                                                           ║
║     not     ║   niegan la condición                                                     ║
║             ║                                                                           ║
║             ║         True si es False.                                                 ║
║             ║         False si es True.                                                 ║
║             ║                                                                           ║
╚═════════════╩═══════════════════════════════════════════════════════════════════════════╝'''+Back.RESET)



print("""
Operadores lógicos de Python (sentencias condiciónales):
x = 5
y = 5
and     x > 0 and  y < 18   devuelve True ambos segmentos de la condición son True
or      x < 0 or   y < 18   devuelve True alguno de los segmentos de la condición es True
not     not(x < 0 or   y > 18)   devuelve el booleano inverso a la condición, si es True devuelve False y viceversa""")

pausa()
limpiar()
print("""
Operadores de membrecia
x=5
y=11
z=[0,1,2,3,4,5,6,7,8,9]

x in z devuelve True si el valor del objeto esta presente en la conjunto, colección o string
y not in z   devuelve el booleano inverso a la condición, si es True devuelve False y viceversa""")
pausa()
limpiar()


print(F'''{Fore.WHITE+Back.BLUE}

╔═════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                         ║
║  ╔════╗  ╔═════╗  ╔═════╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗  ╔═════╗  ╔═════╗  ╔════╗  ║
║ ╔╝    ╚╗ ║     ╚╗ ║       ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ║       ╔╝    ╚╗ ║
║ ║      ║ ║      ║ ║       ║      ║ ║      ║ ║      ║ ║      ║ ║      ║ ║       ║        ║
║ ║      ║ ║     ╔╝ ║       ║     ╔╝ ║      ║ ║      ║ ║      ║ ║     ╔╝ ║       ╚╗       ║
║ ║      ║ ╠═════╝  ╠════╣  ╠══╦══╝  ╠══════╣ ║      ║ ║      ║ ╠══╦══╝  ╠════╣   ╚════╗  ║
║ ║      ║ ║        ║       ║  ╚╗    ║      ║ ║      ║ ║      ║ ║  ╚╗    ║             ╚╗ ║
║ ╚╗    ╔╝ ║        ║       ║   ╚╗   ║      ║ ║     ╔╝ ╚╗    ╔╝ ║   ╚╗   ║       ╚╗    ╔╝ ║
║  ╚════╝  ╩        ╚═════╝ ╩    ╚╝  ╩      ╩ ╚═════╝   ╚════╝  ╩    ╚╝  ╚═════╝  ╚════╝  ║
║                                                                                         ║
║                                                                                         ║
║                                                                                         ║
║                                 ╔═════╗   ╔══════╗                                      ║
║                                 ║     ╚╗  ║                                             ║
║                                 ║      ║  ║                                             ║
║                                 ║      ║  ║                                             ║
║                                 ║      ║  ╠════╣                                        ║
║                                 ║      ║  ║                                             ║
║                                 ║     ╔╝  ║                                             ║
║                                 ╚═════╝   ╚══════╝                                      ║
║                                                                                         ║
║                                                                                         ║
║      ╦  ╔═════╗   ╔══════╗  ╔╗      ╦  ╔═══╦═══╗  ╦   ╔═════╗    ╔════╗   ╔═════╗       ║
║      ║  ║     ╚╗  ║         ║╚╗     ║      ║      ║   ║     ╚╗  ╔╝    ╚╗  ║     ╚╗      ║
║      ║  ║      ║  ║         ║ ╚╗    ║      ║      ║   ║      ║  ║      ║  ║      ║      ║
║      ║  ║      ║  ║         ║  ╚╗   ║      ║      ║   ║      ║  ║      ║  ║      ║      ║
║      ║  ║      ║  ╠════╣    ║   ╚╗  ║      ║      ║   ║      ║  ╠══════╣  ║      ║      ║
║      ║  ║      ║  ║         ║    ╚╗ ║      ║      ║   ║      ║  ║      ║  ║      ║      ║
║      ║  ║     ╔╝  ║         ║     ╚╗║      ║      ║   ║     ╔╝  ║      ║  ║     ╔╝      ║
║      ╩  ╚═════╝   ╚══════╝  ╩      ╚╝      ╩      ╩   ╚═════╝   ╩      ╩  ╚═════╝       ║
║                                                                                         ║
║                                                                                         ║
╠═════════════╦═══════════════════════════════════════════════════════════════════════════╣{Style.RESET_ALL}
║             ║                                                                           ║
║     is      ║  True si ambos operandos hacen referencia al mismo objeto.                ║
║             ║        False en caso contrario.                                           ║
║             ║                                                                           ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║             ║                                                                           ║
║    is not   ║  True si ambos operandos NO hacen referencia al mismo objeto.             ║
║             ║        False en caso contrario.                                           ║
║             ║                                                                           ║
╚═════════════╩═══════════════════════════════════════════════════════════════════════════╝'''+Back.RESET)
print("""
Operadores de identidad
x=5
y=5
z=6
x is y devuelve True si el valor del primer objeto es el mismo que es segundo ver id
y not is z   devuelve el booleano inverso a la condición, si es True devuelve False y viceversa""")



pausa()
limpiar()

print(Style.RESET_ALL)
print(F'''{Fore.WHITE+Back.BLUE}
╔═════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                         ║
║  ╔════╗  ╔═════╗  ╔═════╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗  ╔═════╗  ╔═════╗  ╔════╗  ║
║ ╔╝    ╚╗ ║     ╚╗ ║       ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ║       ╔╝    ╚╗ ║
║ ║      ║ ║      ║ ║       ║      ║ ║      ║ ║      ║ ║      ║ ║      ║ ║       ║        ║
║ ║      ║ ║     ╔╝ ║       ║     ╔╝ ║      ║ ║      ║ ║      ║ ║     ╔╝ ║       ╚╗       ║
║ ║      ║ ╠═════╝  ╠════╣  ╠══╦══╝  ╠══════╣ ║      ║ ║      ║ ╠══╦══╝  ╠════╣   ╚════╗  ║
║ ║      ║ ║        ║       ║  ╚╗    ║      ║ ║      ║ ║      ║ ║  ╚╗    ║             ╚╗ ║
║ ╚╗    ╔╝ ║        ║       ║   ╚╗   ║      ║ ║     ╔╝ ╚╗    ╔╝ ║   ╚╗   ║       ╚╗    ╔╝ ║
║  ╚════╝  ╩        ╚═════╝ ╩    ╚╝  ╩      ╩ ╚═════╝   ╚════╝  ╩    ╚╝  ╚═════╝  ╚════╝  ║
║                                                                                         ║
║                                                                                         ║
║                                                                            ╦            ║
║                                                                           ╔╝            ║
║                                                                           ╩             ║
║  ╔╗      ╔╗  ╔═════╗  ╔╗      ╔╗  ╔═════╗   ╔═════╗   ╔══════╗   ╔════╗   ╦    ╔════╗   ║
║  ║╚╗    ╔╝║  ║        ║╚╗    ╔╝║  ║     ╚╗  ║     ╚╗  ║         ╔╝    ╚╗  ║   ╔╝    ╚╗  ║
║  ║ ╚╗  ╔╝ ║  ║        ║ ╚╗  ╔╝ ║  ║     ╔╝  ║      ║  ║         ║         ║   ║      ║  ║
║  ║  ╚╗╔╝  ║  ║        ║  ╚╗╔╝  ║  ╠═════╣   ║     ╔╝  ║         ╚╗        ║   ║      ║  ║
║  ║   ╚╝   ║  ╠════╣   ║   ╚╝   ║  ║     ╚╗  ╠══╦══╝   ╠═════╣    ╚════╗   ║   ╠══════╣  ║
║  ║        ║  ║        ║        ║  ║      ║  ║  ╚╗     ║               ╚╗  ║   ║      ║  ║
║  ║        ║  ║        ║        ║  ║     ╔╝  ║   ╚╗    ║         ╚╗    ╔╝  ║   ║      ║  ║
║  ╩        ╩  ╚═════╝  ╩        ╩  ╚═════╝   ╩    ╚╝   ╚══════╝   ╚════╝   ╩   ╩      ╩  ║
║                                                                                         ║
║                                                                                         ║
║                                         ╔════╗                                          ║
║                                        ╔╝    ╚╗                                         ║
║                                        ║      ║                                         ║
║                                        ║      ║                                         ║
║                                        ║      ║                                         ║
║                                        ║      ║                                         ║
║                                        ╚╗    ╔╝                                         ║
║                                         ╚════╝                                          ║
║                                                                                         ║
║ ╔═════╗  ╔═════╗  ╔════╗  ╔══╦══╗ ╔═════╗ ╔╗    ╦ ╔═════╗ ╔╗    ╦   ╔═══╗   ╦   ╔═══╗   ║
║ ║     ╚╗ ║        ║    ╚╗    ║    ║       ║╚╗   ║ ║       ║╚╗   ║  ╔╝   ╚╗  ║  ╔╝   ╚╗  ║
║ ║      ║ ║        ║     ║    ║    ║       ║ ╚╗  ║ ║       ║ ╚╗  ║  ║        ║  ║     ║  ║
║ ║     ╔╝ ║        ║    ╔╝    ║    ║       ║  ╚╗ ║ ║       ║  ╚╗ ║  ║        ║  ║     ║  ║
║ ╠═════╝  ╠════╣   ╠══╦═╝     ║    ╠════╣  ║   ╚╗║ ╠════╣  ║   ╚╗║  ║        ║  ╠═════╣  ║
║ ║        ║        ║  ╚╗      ║    ║       ║    ╚╣ ║       ║    ╚╣  ║        ║  ║     ║  ║
║ ║        ║        ║   ╚╗     ║    ║       ║     ║ ║       ║     ║  ╚╗   ╔╝  ║  ║     ║  ║
║ ╩        ╚═════╝  ╩    ╚╝    ╩    ╚═════╝ ╩     ╩ ╚═════╝ ╩     ╩   ╚═══╝   ╩  ╩     ╩  ║
║                                                                                         ║
╠═════════════╦═══════════════════════════════════════════════════════════════════════════╣{Style.RESET_ALL}
║             ║                                                                           ║
║     in      ║  True si el valor del objeto esta presente en la conjunto, colección      ║
║             ║        o string. False en caso contrario.                                 ║
║             ║                                                                           ║
╠═════════════╬═══════════════════════════════════════════════════════════════════════════╣
║             ║                                                                           ║
║    not in   ║  True si el valor del objeto NO esta presente en la conjunto, colección   ║
║             ║        o string. False en caso contrario.                                 ║
║             ║                                                                           ║
╚═════════════╩═══════════════════════════════════════════════════════════════════════════╝'''+Back.RESET)

print('''
x=5
y=11
z=[0,1,2,3,4,5,6,7,8,9]


''')
x=5
y=11
z="E"
lista=[0,1,2,3,4,5,6,7,8,9]
dic  ={"A":0,"B":1,"C":2,"D":3,"E":4,"F":5,"G":6,"H":7,"I":8,"J":9}
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if ( x in lista ):
    print (" 'x=5' se encuentra en la lista ")
if ( x not in lista ):
    print (" 'x=5' no se encuentra en la lista ")
#-------------------------------------------------------------------------------------------
if ( y in lista ):
    print (" 'y=11' se encuentra en la lista ")
if ( y not in lista ):
    print (" 'y=11' no se encuentra en la lista ")
############################################################################################
if ( x in dic.keys() ):
    print (" 'x=5' se encuentra en las claves del dicciónario ")
if ( x not in dic.keys() ):
    print (" 'x=5' no se encuentra en las claves del dicciónario ")
#-------------------------------------------------------------------------------------------
if ( x  in dic.values() ):
    print (" 'x=5' se encuentra en los valores del dicciónario ")
if ( x not in dic.values() ):
    print (" 'x=5' no se encuentra en los valores del dicciónario ")
############################################################################################
if ( z in dic.keys() ):
    print (""" 'z="E" ' se encuentra en los claves del dicciónario """)
if ( z not in dic.keys() ):
    print (""" 'z="E" ' se encuentra en los claves del dicciónario """)
#-------------------------------------------------------------------------------------------
if ( z  in dic.values() ):
    print (""" 'z="E" ' se encuentra en los valores del dicciónario """)
if ( z not in dic.values() ):
    print (""" 'z="E" ' se encuentra en los valores del dicciónario """)
############################################################################################

pausa()
limpiar()

print(F'''{Fore.WHITE+Back.BLUE}

╔═════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                         ║
║  ╔════╗  ╔═════╗  ╔═════╗ ╔═════╗   ╔════╗  ╔═════╗   ╔════╗  ╔═════╗  ╔═════╗  ╔════╗  ║
║ ╔╝    ╚╗ ║     ╚╗ ║       ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ╔╝    ╚╗ ║     ╚╗ ║       ╔╝    ╚╗ ║
║ ║      ║ ║      ║ ║       ║      ║ ║      ║ ║      ║ ║      ║ ║      ║ ║       ║        ║
║ ║      ║ ║     ╔╝ ║       ║     ╔╝ ║      ║ ║      ║ ║      ║ ║     ╔╝ ║       ╚╗       ║
║ ║      ║ ╠═════╝  ╠════╣  ╠══╦══╝  ╠══════╣ ║      ║ ║      ║ ╠══╦══╝  ╠════╣   ╚════╗  ║
║ ║      ║ ║        ║       ║  ╚╗    ║      ║ ║      ║ ║      ║ ║  ╚╗    ║             ╚╗ ║
║ ╚╗    ╔╝ ║        ║       ║   ╚╗   ║      ║ ║     ╔╝ ╚╗    ╔╝ ║   ╚╗   ║       ╚╗    ╔╝ ║
║  ╚════╝  ╩        ╚═════╝ ╩    ╚╝  ╩      ╩ ╚═════╝   ╚════╝  ╩    ╚╝  ╚═════╝  ╚════╝  ║
║                                                                                         ║
║                                                                                         ║
║                                                                         ╦               ║
║                                                                        ╔╝               ║
║                                                                        ╩                ║
║    ╔════╗    ╔════╗   ╦   ╔════╗   ╔╗    ╦   ╔════╗    ╔════╗   ╦   ╔════╗   ╔╗    ╦    ║
║   ╔╝    ╚╗  ╔╝    ╚╗  ║  ╔╝    ╚╗  ║╚╗   ║  ╔╝    ╚╗  ╔╝    ╚╗  ║  ╔╝    ╚╗  ║╚╗   ║    ║
║   ║      ║  ║         ║  ║         ║ ╚╗  ║  ║      ║  ║         ║  ║      ║  ║ ╚╗  ║    ║
║   ║      ║  ╚╗        ║  ║         ║  ╚╗ ║  ║      ║  ║         ║  ║      ║  ║  ╚╗ ║    ║
║   ╠══════╣   ╚════╗   ║  ╠═════╗   ║   ╚╗║  ╠══════╣  ║         ║  ║      ║  ║   ╚╗║    ║
║   ║      ║        ╚╗  ║  ║     ╚╗  ║    ╚╣  ║      ║  ║         ║  ║      ║  ║    ╚╣    ║
║   ║      ║  ╚╗    ╔╝  ║  ╚╗    ╔╝  ║     ║  ║      ║  ╚╗    ╔╝  ║  ╚╗    ╔╝  ║     ║    ║
║   ╩      ╩   ╚════╝   ╩   ╚════╝   ╩     ╩  ╩      ╩   ╚════╝   ╩   ╚════╝   ╩     ╩    ║
║                                                                                         ║
║                                                                                         ║
║                                                                                         ║
║                                                                                         ║
║    ╔════╗        ╔╗      ╦  ╦ ╦      ╦   ╔══════╗   ╦                                   ║
║   ╔╝    ╚╗       ║╚╗     ║  ║ ║      ║   ║          ║                                   ║
║   ║      ║       ║ ╚╗    ║  ║ ╚╗    ╔╝   ║          ║                                   ║
║   ║      ║       ║  ╚╗   ║  ║  ║    ║    ║          ║                                   ║
║   ╠══════╣       ║   ╚╗  ║  ║  ╚╗  ╔╝    ╠════╣     ║                                   ║
║   ║      ║       ║    ╚╗ ║  ║   ║  ║     ║          ║                                   ║
║   ║      ║       ║     ╚╗║  ║   ╚╗╔╝     ║          ║                                   ║
║   ╩      ╩       ╩      ╚╝  ╩    ╚╝      ╚══════╝   ╚══════╝                            ║
║                                                                                         ║
║                                                                                         ║
║                                                                                         ║
║                     ╔═════╗   ╔══════╗         ╔═════╗    ╦  ╔═══╦═══╗    ╔════╗        ║
║                     ║     ╚╗  ║                ║     ╚╗   ║      ║       ╔╝    ╚╗       ║
║                     ║      ║  ║                ║      ║   ║      ║       ║              ║
║                     ║      ║  ║                ║     ╔╝   ║      ║       ╚╗             ║
║                     ║      ║  ╠════╣           ╠═════╣    ║      ║        ╚════╗        ║
║                     ║      ║  ║                ║     ╚╗   ║      ║             ╚╗       ║
║                     ║     ╔╝  ║                ║     ╔╝   ║      ║       ╚╗    ╔╝       ║
║                     ╚═════╝   ╚══════╝         ╚═════╝    ╩      ╩        ╚════╝        ║
║                                                                                         ║
║                                                                                         ║
║     Los operadores a nivel de bits actúan sobre los operandos como si fueran una        ║
║          cadena de dígitos binarios.                                                    ║
║     Como su nombre indica, actúan sobre los operandos bit a bit.                        ║
║                                                                                         ║
║                                                                                         ║
╠══════════════════════════════════════╦══════════════════════════════════════════════════╣{Style.RESET_ALL}
║       Nivel byte                     ║                                                  ║
║           x | y                      ║         or bit a bit de x e y.                   ║
║           x ^ y                      ║         or exclusivo bit a bit de x e y.         ║
║           x & y                      ║         and bit a bit de x e y.                  ║
║           x << y                     ║         Desplaza x n bits a la izquierda.        ║
║           x >> y                     ║         Desplaza x n bits a la derecha.          ║
║            ~x                        ║         Obtiene los bits de x invertidos.        ║
║                                      ║                                                  ║
╠══════════════════════════════════════╬══════════════════════════╦═══════════════════════╣
║       Nivel byte                     ║                          ║                       ║
║             &=                       ║         a &= b           ║        a = a & b      ║
║             |=                       ║         a |= b           ║        a = a | b      ║
║             ^=                       ║         a ^= b           ║        a = a ^ b      ║
║            >>=                       ║         a >>= b          ║        a = a >> b     ║
║            <<=                       ║         a <<= b          ║        a = a << b     ║
║                                      ║                          ║                       ║
╚══════════════════════════════════════╩══════════════════════════╩═══════════════════════╝'''+Back.RESET)

